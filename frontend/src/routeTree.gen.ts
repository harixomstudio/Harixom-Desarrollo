/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WorkshopsRouteImport } from './routes/Workshops'
import { Route as UserRegisterRouteImport } from './routes/UserRegister'
import { Route as TermsRouteImport } from './routes/Terms'
import { Route as SetProfileRouteImport } from './routes/SetProfile'
import { Route as ResetPasswordRouteImport } from './routes/ResetPassword'
import { Route as RegisterAdminRouteImport } from './routes/RegisterAdmin'
import { Route as RegisterRouteImport } from './routes/Register'
import { Route as ProfileRouteImport } from './routes/Profile'
import { Route as LoginRouteImport } from './routes/Login'
import { Route as LandingRouteImport } from './routes/Landing'
import { Route as ForgotPasswordRouteImport } from './routes/ForgotPassword'
import { Route as FeedRouteImport } from './routes/Feed'
import { Route as EventsRouteImport } from './routes/Events'
import { Route as CreatePublicationRouteImport } from './routes/CreatePublication'
import { Route as CreateAtivityRouteImport } from './routes/CreateAtivity'
import { Route as AIChallengeRouteImport } from './routes/AIChallenge'
import { Route as IndexRouteImport } from './routes/index'

const WorkshopsRoute = WorkshopsRouteImport.update({
  id: '/Workshops',
  path: '/Workshops',
  getParentRoute: () => rootRouteImport,
} as any)
const UserRegisterRoute = UserRegisterRouteImport.update({
  id: '/UserRegister',
  path: '/UserRegister',
  getParentRoute: () => rootRouteImport,
} as any)
const TermsRoute = TermsRouteImport.update({
  id: '/Terms',
  path: '/Terms',
  getParentRoute: () => rootRouteImport,
} as any)
const SetProfileRoute = SetProfileRouteImport.update({
  id: '/SetProfile',
  path: '/SetProfile',
  getParentRoute: () => rootRouteImport,
} as any)
const ResetPasswordRoute = ResetPasswordRouteImport.update({
  id: '/ResetPassword',
  path: '/ResetPassword',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterAdminRoute = RegisterAdminRouteImport.update({
  id: '/RegisterAdmin',
  path: '/RegisterAdmin',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRoute = RegisterRouteImport.update({
  id: '/Register',
  path: '/Register',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/Profile',
  path: '/Profile',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/Login',
  path: '/Login',
  getParentRoute: () => rootRouteImport,
} as any)
const LandingRoute = LandingRouteImport.update({
  id: '/Landing',
  path: '/Landing',
  getParentRoute: () => rootRouteImport,
} as any)
const ForgotPasswordRoute = ForgotPasswordRouteImport.update({
  id: '/ForgotPassword',
  path: '/ForgotPassword',
  getParentRoute: () => rootRouteImport,
} as any)
const FeedRoute = FeedRouteImport.update({
  id: '/Feed',
  path: '/Feed',
  getParentRoute: () => rootRouteImport,
} as any)
const EventsRoute = EventsRouteImport.update({
  id: '/Events',
  path: '/Events',
  getParentRoute: () => rootRouteImport,
} as any)
const CreatePublicationRoute = CreatePublicationRouteImport.update({
  id: '/CreatePublication',
  path: '/CreatePublication',
  getParentRoute: () => rootRouteImport,
} as any)
const CreateAtivityRoute = CreateAtivityRouteImport.update({
  id: '/CreateAtivity',
  path: '/CreateAtivity',
  getParentRoute: () => rootRouteImport,
} as any)
const AIChallengeRoute = AIChallengeRouteImport.update({
  id: '/AIChallenge',
  path: '/AIChallenge',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/AIChallenge': typeof AIChallengeRoute
  '/CreateAtivity': typeof CreateAtivityRoute
  '/CreatePublication': typeof CreatePublicationRoute
  '/Events': typeof EventsRoute
  '/Feed': typeof FeedRoute
  '/ForgotPassword': typeof ForgotPasswordRoute
  '/Landing': typeof LandingRoute
  '/Login': typeof LoginRoute
  '/Profile': typeof ProfileRoute
  '/Register': typeof RegisterRoute
  '/RegisterAdmin': typeof RegisterAdminRoute
  '/ResetPassword': typeof ResetPasswordRoute
  '/SetProfile': typeof SetProfileRoute
  '/Terms': typeof TermsRoute
  '/UserRegister': typeof UserRegisterRoute
  '/Workshops': typeof WorkshopsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/AIChallenge': typeof AIChallengeRoute
  '/CreateAtivity': typeof CreateAtivityRoute
  '/CreatePublication': typeof CreatePublicationRoute
  '/Events': typeof EventsRoute
  '/Feed': typeof FeedRoute
  '/ForgotPassword': typeof ForgotPasswordRoute
  '/Landing': typeof LandingRoute
  '/Login': typeof LoginRoute
  '/Profile': typeof ProfileRoute
  '/Register': typeof RegisterRoute
  '/RegisterAdmin': typeof RegisterAdminRoute
  '/ResetPassword': typeof ResetPasswordRoute
  '/SetProfile': typeof SetProfileRoute
  '/Terms': typeof TermsRoute
  '/UserRegister': typeof UserRegisterRoute
  '/Workshops': typeof WorkshopsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/AIChallenge': typeof AIChallengeRoute
  '/CreateAtivity': typeof CreateAtivityRoute
  '/CreatePublication': typeof CreatePublicationRoute
  '/Events': typeof EventsRoute
  '/Feed': typeof FeedRoute
  '/ForgotPassword': typeof ForgotPasswordRoute
  '/Landing': typeof LandingRoute
  '/Login': typeof LoginRoute
  '/Profile': typeof ProfileRoute
  '/Register': typeof RegisterRoute
  '/RegisterAdmin': typeof RegisterAdminRoute
  '/ResetPassword': typeof ResetPasswordRoute
  '/SetProfile': typeof SetProfileRoute
  '/Terms': typeof TermsRoute
  '/UserRegister': typeof UserRegisterRoute
  '/Workshops': typeof WorkshopsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/AIChallenge'
    | '/CreateAtivity'
    | '/CreatePublication'
    | '/Events'
    | '/Feed'
    | '/ForgotPassword'
    | '/Landing'
    | '/Login'
    | '/Profile'
    | '/Register'
    | '/RegisterAdmin'
    | '/ResetPassword'
    | '/SetProfile'
    | '/Terms'
    | '/UserRegister'
    | '/Workshops'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/AIChallenge'
    | '/CreateAtivity'
    | '/CreatePublication'
    | '/Events'
    | '/Feed'
    | '/ForgotPassword'
    | '/Landing'
    | '/Login'
    | '/Profile'
    | '/Register'
    | '/RegisterAdmin'
    | '/ResetPassword'
    | '/SetProfile'
    | '/Terms'
    | '/UserRegister'
    | '/Workshops'
  id:
    | '__root__'
    | '/'
    | '/AIChallenge'
    | '/CreateAtivity'
    | '/CreatePublication'
    | '/Events'
    | '/Feed'
    | '/ForgotPassword'
    | '/Landing'
    | '/Login'
    | '/Profile'
    | '/Register'
    | '/RegisterAdmin'
    | '/ResetPassword'
    | '/SetProfile'
    | '/Terms'
    | '/UserRegister'
    | '/Workshops'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AIChallengeRoute: typeof AIChallengeRoute
  CreateAtivityRoute: typeof CreateAtivityRoute
  CreatePublicationRoute: typeof CreatePublicationRoute
  EventsRoute: typeof EventsRoute
  FeedRoute: typeof FeedRoute
  ForgotPasswordRoute: typeof ForgotPasswordRoute
  LandingRoute: typeof LandingRoute
  LoginRoute: typeof LoginRoute
  ProfileRoute: typeof ProfileRoute
  RegisterRoute: typeof RegisterRoute
  RegisterAdminRoute: typeof RegisterAdminRoute
  ResetPasswordRoute: typeof ResetPasswordRoute
  SetProfileRoute: typeof SetProfileRoute
  TermsRoute: typeof TermsRoute
  UserRegisterRoute: typeof UserRegisterRoute
  WorkshopsRoute: typeof WorkshopsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/Workshops': {
      id: '/Workshops'
      path: '/Workshops'
      fullPath: '/Workshops'
      preLoaderRoute: typeof WorkshopsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/UserRegister': {
      id: '/UserRegister'
      path: '/UserRegister'
      fullPath: '/UserRegister'
      preLoaderRoute: typeof UserRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Terms': {
      id: '/Terms'
      path: '/Terms'
      fullPath: '/Terms'
      preLoaderRoute: typeof TermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/SetProfile': {
      id: '/SetProfile'
      path: '/SetProfile'
      fullPath: '/SetProfile'
      preLoaderRoute: typeof SetProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ResetPassword': {
      id: '/ResetPassword'
      path: '/ResetPassword'
      fullPath: '/ResetPassword'
      preLoaderRoute: typeof ResetPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/RegisterAdmin': {
      id: '/RegisterAdmin'
      path: '/RegisterAdmin'
      fullPath: '/RegisterAdmin'
      preLoaderRoute: typeof RegisterAdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Register': {
      id: '/Register'
      path: '/Register'
      fullPath: '/Register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Profile': {
      id: '/Profile'
      path: '/Profile'
      fullPath: '/Profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Login': {
      id: '/Login'
      path: '/Login'
      fullPath: '/Login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Landing': {
      id: '/Landing'
      path: '/Landing'
      fullPath: '/Landing'
      preLoaderRoute: typeof LandingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ForgotPassword': {
      id: '/ForgotPassword'
      path: '/ForgotPassword'
      fullPath: '/ForgotPassword'
      preLoaderRoute: typeof ForgotPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Feed': {
      id: '/Feed'
      path: '/Feed'
      fullPath: '/Feed'
      preLoaderRoute: typeof FeedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Events': {
      id: '/Events'
      path: '/Events'
      fullPath: '/Events'
      preLoaderRoute: typeof EventsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/CreatePublication': {
      id: '/CreatePublication'
      path: '/CreatePublication'
      fullPath: '/CreatePublication'
      preLoaderRoute: typeof CreatePublicationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/CreateAtivity': {
      id: '/CreateAtivity'
      path: '/CreateAtivity'
      fullPath: '/CreateAtivity'
      preLoaderRoute: typeof CreateAtivityRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/AIChallenge': {
      id: '/AIChallenge'
      path: '/AIChallenge'
      fullPath: '/AIChallenge'
      preLoaderRoute: typeof AIChallengeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AIChallengeRoute: AIChallengeRoute,
  CreateAtivityRoute: CreateAtivityRoute,
  CreatePublicationRoute: CreatePublicationRoute,
  EventsRoute: EventsRoute,
  FeedRoute: FeedRoute,
  ForgotPasswordRoute: ForgotPasswordRoute,
  LandingRoute: LandingRoute,
  LoginRoute: LoginRoute,
  ProfileRoute: ProfileRoute,
  RegisterRoute: RegisterRoute,
  RegisterAdminRoute: RegisterAdminRoute,
  ResetPasswordRoute: ResetPasswordRoute,
  SetProfileRoute: SetProfileRoute,
  TermsRoute: TermsRoute,
  UserRegisterRoute: UserRegisterRoute,
  WorkshopsRoute: WorkshopsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
